/*

@ShortLicense@

Authors: @JS@
         @MJL@

Released: @ReleaseDate@

*/

package jskat.gui.main;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.JFrame;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.ImageIcon;

import org.apache.log4j.Logger;

import java.util.Observer;
import java.util.Observable;
import java.util.Vector;

import jskat.control.SkatGame;
import jskat.control.SkatSeries;
import jskat.control.SkatTable;
import jskat.data.JSkatDataModel;
import jskat.data.Trick;
import jskat.gui.JSkatGraphicRepository;
import jskat.gui.main.CardPanel;
import jskat.player.JSkatPlayer;
import jskat.share.Card;

/**
 * The Last tricks dialog for showing the previous tricks
 * 
 * @author Jan Sch&auml;fer
 */
public class LastTricksDialog extends JDialog implements Observer {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1460201094382175326L;

	static Logger log = Logger.getLogger(jskat.gui.main.LastTricksDialog.class);
	
	/**
	 * Gets an instance of the LastTricksDialog
	 * 
	 * @return Reference to the dialog
	 */
	public static LastTricksDialog getInstance() {
		if(myInstance==null) throw new IllegalStateException("LastTricksDialog has not been initialized!");
		return myInstance;
	}

	/**
	 * Creates a new LastTricksDialog
	 * 
	 * @param dataModel Data model
	 * @param jskatBitmaps Graphic repository that holds all graphics used in JSkat
	 * @param parent Parent frame
	 * @return Last tricks dialog
	 */
	public static LastTricksDialog createInstance(JSkatDataModel dataModel,
			JSkatGraphicRepository jskatBitmaps, JFrame parent) {
		return myInstance = new LastTricksDialog(dataModel, jskatBitmaps, parent);
	}

	/**
	 * Creates new form LastTricksDialog
	 * 
	 * @param dataModel
	 *            The JSkatDataModel that holds all data
	 * @param jskatBitmaps
	 *            The JSkatGraphicRepository that holds all images used in JSkat
	 * @param parent
	 *            The parent JFrame
	 */
	private LastTricksDialog(JSkatDataModel dataModel,
			JSkatGraphicRepository jskatBitmaps, JFrame parent) {

		super(parent, true);
		
		this.dataModel = dataModel;
		this.jskatBitmaps = jskatBitmaps;
		this.parent = parent;

		initComponents();
		setLocationRelativeTo(parent);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		northPanel = new JPanel();
		westPanel = new JPanel();
		eastPanel = new JPanel();
		southPanel = new JPanel();
		centerPanel = new JPanel();
		firstTrickButton = new JButton();
		previousTrickButton = new JButton();
		nextTrickButton = new JButton();
		lastTrickButton = new JButton();
		closeButton = new JButton();
		firstPlayerNameLabel = new JLabel(" ");
		firstPlayerNamePanel = new JPanel();
		secondPlayerNameLabel = new JLabel(" ");
		secondPlayerNamePanel = new JPanel();
		thirdPlayerNameLabel = new JLabel(" ");
		thirdPlayerNamePanel = new JPanel();
		firstCardPanel = new CardPanel(null, jskatBitmaps, false);
		firstCardPanel.setPreferredSize(new Dimension(73, 97));
		firstCardPanel.setMinimumSize(new Dimension(73, 97));
		secondCardPanel = new CardPanel(null, jskatBitmaps, false);
		secondCardPanel.setPreferredSize(new Dimension(73, 97));
		secondCardPanel.setMinimumSize(new Dimension(73, 97));
		thirdCardPanel = new CardPanel(null, jskatBitmaps, false);
		thirdCardPanel.setPreferredSize(new Dimension(73, 97));
		thirdCardPanel.setMinimumSize(new Dimension(73, 97));

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle(dataModel.getResourceBundle().getString("last_tricks"));

		firstTrickButton.setIcon(new ImageIcon(jskatBitmaps.getIconImage(
				JSkatGraphicRepository.FIRST_ICON,
				JSkatGraphicRepository.SMALL_ICON)));
		firstTrickButton.setEnabled(false);
		firstTrickButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {

				lastTricks = 0;
				refresh((Trick) skatTable.getSkatTableData().getCurrGameData().getTricks().get(
						lastTricks));
			}
		});
		southPanel.add(firstTrickButton);

		previousTrickButton.setIcon(new ImageIcon(jskatBitmaps.getIconImage(
				JSkatGraphicRepository.PREVIOUS_ICON,
				JSkatGraphicRepository.SMALL_ICON)));
		previousTrickButton.setEnabled(false);
		previousTrickButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {

				lastTricks--;
				refresh((Trick) skatTable.getSkatTableData().getCurrGameData().getTricks().get(
						lastTricks));
			}
		});
		southPanel.add(previousTrickButton);

		nextTrickButton.setIcon(new ImageIcon(jskatBitmaps.getIconImage(
				JSkatGraphicRepository.NEXT_ICON,
				JSkatGraphicRepository.SMALL_ICON)));
		nextTrickButton.setEnabled(false);
		nextTrickButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {

				lastTricks++;
				refresh((Trick) skatTable.getSkatTableData().getCurrGameData().getTricks().get(
						lastTricks));
			}
		});
		southPanel.add(nextTrickButton);

		lastTrickButton.setIcon(new ImageIcon(jskatBitmaps.getIconImage(
				JSkatGraphicRepository.LAST_ICON,
				JSkatGraphicRepository.SMALL_ICON)));
		lastTrickButton.setEnabled(false);
		lastTrickButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {

				lastTricks = skatTable.getSkatTableData().getCurrGameData().getTricks().size() - 1;
				refresh((Trick) skatTable.getSkatTableData().getCurrGameData().getTricks().get(
						lastTricks));
			}
		});
		southPanel.add(lastTrickButton);

		closeButton.setText(dataModel.getResourceBundle().getString("close"));
		closeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {

				setVisible(false);
				dispose();
			}
		});
		southPanel.add(closeButton);

		getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

		getContentPane().add(northPanel, java.awt.BorderLayout.NORTH);
		getContentPane().add(eastPanel, java.awt.BorderLayout.EAST);
		getContentPane().add(westPanel, java.awt.BorderLayout.WEST);

		centerPanel.setLayout(new GridBagLayout());
		GridBagConstraints constraints = new GridBagConstraints();
		firstPlayerNamePanel.add(firstPlayerNameLabel);
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(firstPlayerNamePanel, constraints);
		secondPlayerNamePanel.add(secondPlayerNameLabel);
		constraints.gridx = 1;
		centerPanel.add(secondPlayerNamePanel, constraints);
		thirdPlayerNamePanel.add(thirdPlayerNameLabel);
		constraints.gridx = 2;
		centerPanel.add(thirdPlayerNamePanel, constraints);
		constraints.gridx = 0;
		constraints.gridy = 1;
		centerPanel.add(firstCardPanel, constraints);
		constraints.gridx = 1;
		centerPanel.add(secondCardPanel, constraints);
		constraints.gridx = 2;
		centerPanel.add(thirdCardPanel, constraints);

		getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

		pack();

		setResizable(false);
	}

	/**
	 * @see java.awt.Dialog#setVisible(boolean)
	 */
	public void setVisible(boolean visible) {

		if (visible) {
			// first set the Dialog back to it's initial state
			setLocationRelativeTo(parent);
		}

		super.setVisible(visible);
	}

	private void refresh(Trick trick) {

		setPlayerNames(trick);
		setCards(trick);
		setSkipButtons();
		centerPanel.repaint();
	}

	private void setPlayerNames(Trick trick) {

		log.debug("setPlayer()");

		int foreHand = trick.getForeHand();
		firstPlayerNameLabel.setText(player[foreHand].getPlayerName());
		secondPlayerNameLabel.setText(player[(foreHand + 1) % 3]
				.getPlayerName());
		thirdPlayerNameLabel
				.setText(player[(foreHand + 2) % 3].getPlayerName());
	}

	private void setCards(Trick trick) {

		log.debug("setCards()");

		Card card = trick.getFirstCard();
		// log.debug("First card: " + card.getSuit() + " " + card.getValue());
		firstCardPanel.setCard(card.getSuit(), card.getRank());
		card = trick.getSecondCard();
		// log.debug("Second card: " + card.getSuit() + " " + card.getValue());
		secondCardPanel.setCard(card.getSuit(), card.getRank());
		card = trick.getThirdCard();
		// log.debug("Third card: " + card.getSuit() + " " + card.getValue());
		thirdCardPanel.setCard(card.getSuit(), card.getRank());
	}

	private void setSkipButtons() {

		int currTrickNumber = skatTable.getSkatTableData().getCurrGameData().getTricks().size() - 1;
		// log.debug("Setting skip buttons: current="+currTrickNumber+", last="+lastTricks);
		setTitle(dataModel.getResourceBundle().getString("last_tricks")+" #"+(lastTricks+1));
		
		if (currTrickNumber == lastTricks) {
			lastTrickButton.setEnabled(false);
			nextTrickButton.setEnabled(false);
		} else {
			lastTrickButton.setEnabled(true);
			nextTrickButton.setEnabled(true);
		}

		if (lastTricks == 0) {
			firstTrickButton.setEnabled(false);
			previousTrickButton.setEnabled(false);
		} else {
			firstTrickButton.setEnabled(true);
			previousTrickButton.setEnabled(true);
		}
	}

	/**
	 * Sets a new skat table
	 * 
	 * @param skatTable
	 */
	public void setSkatTable(SkatTable skatTable) {
		this.skatTable = skatTable;
	}

	
	/**
	 * Initializes the dialog for a new game
	 * 
	 * @param series Current skat series
	 */
	public void initForNewGame(SkatSeries series) {
		
		setTitle(dataModel.getResourceBundle().getString("last_tricks"));
		player = series.getSkatSeriesData().getPlayers();
		lastTricks = 0;
		firstTrickButton.setEnabled(false);
		previousTrickButton.setEnabled(false);
		nextTrickButton.setEnabled(false);
		lastTrickButton.setEnabled(false);
		firstPlayerNameLabel.setText(" ");
		firstCardPanel.setCard(null, null);
		secondPlayerNameLabel.setText(" ");
		secondCardPanel.setCard(null, null);
		thirdPlayerNameLabel.setText(" ");
		thirdCardPanel.setCard(null, null);
		centerPanel.repaint();
	}
	
	/**
	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
	 */
	public void update(Observable observ, Object obj) {

		// log.debug("UPDATE " + observ + ": " + obj + " has changed...");

		if (observ instanceof SkatGame && obj instanceof SkatGame.GameState) {
			
			if ((SkatGame.GameState) obj == SkatGame.GameState.TRICK_COMPLETED) {
			
				Vector<Trick> tricks = ((SkatGame) observ).getSkatGameData().getTricks();
				log.debug("Updating trick in LastTricksDialog ("+tricks.size()+" available)...");
	
				if (tricks.size() > 0) {
	
					lastTricks = tricks.size() - 1;
					refresh((Trick) skatTable.getSkatTableData().getCurrGameData().getTricks().get(
							lastTricks));
				}
			}
		}
			
	}

	// Variables declaration
	private static LastTricksDialog myInstance = null;
	
	private SkatTable skatTable;

	private JSkatDataModel dataModel;

	private JSkatGraphicRepository jskatBitmaps;

	private JFrame parent;

	private JButton firstTrickButton;

	private JButton previousTrickButton;

	private JButton nextTrickButton;

	private JButton lastTrickButton;

	private JButton closeButton;

	private JPanel northPanel;

	private JPanel westPanel;

	private JPanel eastPanel;

	private JPanel southPanel;

	private JPanel centerPanel;

	private CardPanel firstCardPanel;

	private JLabel firstPlayerNameLabel;

	private JPanel firstPlayerNamePanel;

	private CardPanel secondCardPanel;

	private JLabel secondPlayerNameLabel;

	private JPanel secondPlayerNamePanel;

	private CardPanel thirdCardPanel;

	private JLabel thirdPlayerNameLabel;

	private JPanel thirdPlayerNamePanel;

	private int lastTricks = 0;

	private JSkatPlayer[] player;
}
